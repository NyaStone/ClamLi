{
    "name": "Extended Signatures",
    "patterns": [
		{"include": "#extendedSignature"}
    ],
    "repository": {
        "extendedSignature": {
            "contentName": "entity.extendedSignature.ndb",
            "begin": "(?<=^)(?!$)",
			"end": "(?=$)",
            "patterns": [
                {
                    "begin": "(?<=\\G)[^:]+(?=:)",
                    "end": "(?=$|:)",
                    "name": "variable.other.threatName.ndb"
                },
                {"include": "#target"},
                {"include": "#offset"},
                {"include": "#contentBasedSignature"},
                {"include": "#minFlevel"},
                {"include": "#maxFlevel"}
            ]
        },
        "target": {
            "begin": "(?<!:[^:]*)(:)",
            "end": "(?=$|:)",
            "beginCaptures": {
                "1": {"name": "keyword.control.ndb"}
            },
            "patterns": [
                {
                    "name": "constant.numeric.fileType.ndb",
                    "match": "(?<!\\d)\\d(?!\\d)"
                },
                {
                    "name": "constant.numeric.fileType.ndb",
                    "match": "(?<!\\d)1[012](?!\\d)"
                },
                {
                    "name": "invalid.illegal.invalidTargetFileFormat.ndb",
                    "match": "."
                }
            ]
        },
        "offset": {
            "begin": "(?<!:[^:]*:[^:]*)(:)",
            "end": "(?=$|:)",
            "beginCaptures": {
                "1": {"name": "keyword.control.ndb"}
            },
            "patterns": [
                {
                    "name": "keyword.option.entryOffset.ndb",
                    "match": "(?<=\\G)EP[\\+\\-]"
                },
                {
                    "name": "keyword.option.endOffset.ndb",
                    "match": "(?<=\\G)EOF\\-"
                },
                {
                    "name": "keyword.option.lastSectionOffset.ndb",
                    "match": "(?<=\\G)SL\\+"
                },
                {
                    "begin": "(?<=\\G)(SE)",
                    "end": "(?=$|:)",
                    "beginCaptures": {
                        "1": {"name": "keyword.option.entireSectionOffset.ndb"}
                    },
                    "patterns": [
                        {
                            "name": "variable.other.sectionOffset.ndb",
                            "match": "\\d"
                        },
                        {
                            "name": "invalid.illegal.sectionOffset.ndb",
                            "match": "."
                        }
                    ]
                },
                {
                    "begin": "(?<=\\G)(S)",
                    "end": "(\\+)|(?=:|$)",
                    "beginCaptures": {
                        "1": {"name": "keyword.option.sectionOffset.ndb"}
                    },
                    "endCaptures": {
                        "1": {"name": "keyword.option.sectionOffset.ndb"}
                    },
                    "patterns": [
                        {
                            "name": "variable.other.sectionOffset.ndb",
                            "match": "\\d"
                        },
                        {
                            "name": "invalid.illegal.sectionOffset.ndb",
                            "match": "."
                        }
                    ]
                },
                {
                    "begin": "(?<=\\G)(\\$)",
                    "end": "(?=$|:)",
                    "beginCaptures": {
                        "1": {"name": "keyword.option.macroId.ndb"}
                    },
                    "patterns": [
                        {
                            "name": "variable.other.macroId.ndb",
                            "match": "\\d"
                        },
                        {
                            "name": "invalid.illegal.invalidMacroId.ndb",
                            "match": "."
                        }
                    ]
                },
                {
                    "begin": "(?<=\\G)(VI)",
                    "end": "(?=$|:)",
                    "beginCaptures": {
                        "1": {"name": "keyword.option.versionInfo.ndb"}
                    },
                    "patterns": [
                        {
                            "name": "invalid.illegal.versionInfo.ndb",
                            "match": "."
                        }
                    ]
                },
                {
                    "match": "([0-9]+)(,)?([0-9]+)?((?=:|$))",
                    "captures": {
                        "1": {"name": "variable.other.offset.ndb"},
                        "2": {"name": "keyword.operator.range.ndb"},
                        "3": {"name": "variable.other.offset.ndb"}
                    }
                },
                {
                    "match": "\\*(?=:|$)",
                    "name": "variable.other.offset.anyWildcard.ndb"
                },
                {
                    "name": "invalid.illegal.usage.ndb",
                    "match": "."
                }
            ]
        },
        "contentBasedSignature": {
            "begin": "(?<!:[^:]*:[^:]*:[^:]*)(:)",
            "end": "(?=$|:)",
            "beginCaptures": {
                "1": {"name": "keyword.control.ndb"}
            },
			"contentName": "string.interpolated.contentBasedSignature.ndb",
			"patterns": [
				{"include": "#matchRangeOfBytes"},
				{
					"match": "{(?![^}]*})",
					"name": "invalid.illegal.contentBasedSignature.openRangeOperator.ndb"
				},
				{"include": "#noSplitRangeOfBytes"},
				{
					"match": "\\[(?![^\\]]*\\])",
					"name": "invalid.illegal.contentBasedSignature.openRangeOperator.ndb"
				},
				{"include": "#characterClass"},
				{"include": "#alternateStrings"},
				{"include": "#byteWildCard"},
				{"include": "#nimbleWildCard"},
				{"include": "#illegalCharacter"},
				{"include": "#incompleteByte"}
			]
		},
        "recursiveContentBasedSignature": {
			"begin": "(?<=[\\(\\|])",
			"end": "(?=$|\\)|\\|)",
			"patterns": [
				{"include": "#matchRangeOfBytes"},
				{
					"match": "{(?![^}]*})",
					"name": "invalid.illegal.subSignature.openRangeOperator.ndb"
				},
				{"include": "#noSplitRangeOfBytes"},
				{
					"match": "\\[(?![^\\]]*\\])",
					"name": "invalid.illegal.subSignature.openRangeOperator.ndb"
				},
				{"include": "#characterClass"},
				{"include": "#alternateStrings"},
				{"include": "#byteWildCard"},
				{"include": "#nimbleWildCard"},
				{"include": "#illegalCharacter"},
				{"include": "#incompleteByte"}
			]
		},
        "illegalCharacter": {
			"match": "[^[0-9][a-f]\\?\\*]",
			"name": "invalid.illegal.subSignature.character.ndb"
		},
		"incompleteByte": {
			"match": "(?<=[^[0-9][a-f]\\?](?:[[0-9][a-f]\\?]{2})*)[[0-9][a-f]\\?](?=[^[0-9][a-f]\\?]|$)",
			"name": "invalid.illegal.subSignature.incompleteByte.ndb"
		},
		"byteWildCard": {
			"match": "\\*",
			"name": "keyword.wildcard.byte.ndb"
		},
		"nimbleWildCard": {
			"match": "\\?",
			"name": "variable.wildcard.byte.ndb"
		},
		"matchRangeOfBytes": {
			"begin": "({)(?=[^}]*})",
			"end": "(?<=\\1[^}]*)(})",
			"beginCaptures": {
				"1": {"name": "keyword.control.ndb"}
			},
			"endCaptures": {
				"1": {"name": "keyword.control.ndb"}
			},
			"patterns": [
				{"match": "[^[0-9]-]", "name": "invalid.illegal.subSignature.matchNBytesRange.ndb"},
				{"match": "(?<=-.*)-", "name": "invalid.illegal.subSignature.matchNBytesRange.ndb"},
				{
					"match": "([0-9]*)(-)?([0-9])*", 
					"captures": {
						"1": {"name": "constant.numeric.integer.ndb"},
						"2": {"name": "keyword.operator.range.ndb"},
						"3": {"name": "constant.numeric.integer.ndb"}
					}
				}
			]
		},
		"noSplitRangeOfBytes": {
			"begin": "(\\[)(?=[^\\]]*\\])",
			"end": "(?<=\\1[^\\]]*)(\\])",
			"beginCaptures": {
				"1": {"name": "keyword.control.ndb"}
			},
			"endCaptures": {
				"1": {"name": "keyword.control.ndb"}
			},
			"patterns": [
				{"include": "#range"},
				{"include": "#incompleteRange"},
				{"match": "[^[0-9]-]", "name": "invalid.illegal.subSignature.matchNBytesRange.ndb"},
				{"match": "(?<=-.*)-", "name": "invalid.illegal.subSignature.matchNBytesRange.ndb"}
			]
		},
		"characterClass": {
			"match": "\\([BLW]\\)",
			"name": "keyword.other.subSignature.characterClass.ndb"
		},
		"alternateStrings": {
			"begin": "(\\()",
			"end": "(\\))|(?=$)",
			"beginCaptures": {
				"1": {"name": "keyword.control.parenthesis.ndb"}
			},
			"endCaptures": {
				"1": {"name": "keyword.control.parenthesis.ndb"}
			},
			"patterns": [
				{"include": "#recursiveContentBasedSignature"},
				{
					"match": "\\|",
					"name": "keyword.operator.or.ndb"
				}
			]
		},
        "range": {
			"match": "([0-9]+)(-)([0-9]+)",
			"captures": {
				"1": {"name": "constant.numeric.integer.ndb"},
				"2": {"name": "keyword.operator.range.ndb"},
				"3": {"name": "constant.numeric.integer.ndb"}
			}
		},
		"incompleteRange": {
			"match": "(?![0-9]+-[0-9]+).",
			"name": "invalid.illegal.range.incomplete.ndb"
		},
        "minFlevel": {
            "begin": "(?<!:[^:]*:[^:]*:[^:]*:[^:]*)(:)",
            "end": "(?=:|$)",
            "beginCaptures": {
                "1": {"name": "keyword.control.ndb"}
            },
            "patterns": [
                {
                    "name": "constant.numeric.integer.flevel.ndb",
                    "match": "\\d"
                },
                {
                    "name": "invalid.illegal.invalidFlevel.ndb",
                    "match": "."
                }
            ]
        },
        "maxFlevel": {
            "begin": "(?<!:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*)(:)",
            "end": "(?=$)",
            "beginCaptures": {
                "1": {"name": "keyword.control.ndb"}
            },
            "patterns": [
                {
                    "name": "constant.numeric.integer.flevel.ndb",
                    "match": "\\d"
                },
                {
                    "name": "invalid.illegal.invalidFlevel.ndb",
                    "match": "."
                }
            ]
        }
    },
    "scopeName": "source.ndb"
}